OLTP Schema Setup




-- Create OLTP database
CREATE DATABASE retail_oltp;
USE retail_oltp;

-- customers table
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    registered_date DATE
);

-- products table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2)
);

-- stores table
CREATE TABLE stores (
    store_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    region VARCHAR(50)
);

-- transactions table
CREATE TABLE transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    store_id INT,
    quantity INT NOT NULL,
    transaction_date DATE NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (store_id) REFERENCES stores(store_id)
);





Sample Data Insertion





-- Customers
INSERT INTO customers (name, email, registered_date) VALUES
('Alice Smith', 'alice@example.com', '2025-01-10'),
('Bob Brown', 'bob@example.com', '2025-02-01');

-- Products
INSERT INTO products (name, category, price) VALUES
('T-Shirt', 'Apparel', 19.99),
('Laptop', 'Electronics', 999.00);

-- Stores
INSERT INTO stores (name, region) VALUES
('Downtown Store', 'East'),
('Mall Outlet', 'West');

-- Transactions
INSERT INTO transactions (customer_id, product_id, store_id, quantity, transaction_date) VALUES
(1, 1, 1, 2, '2025-05-01'),
(2, 2, 2, 1, '2025-05-03');






OLAP Schema Setup





-- Create OLAP database
CREATE DATABASE retail_olap;
USE retail_olap;

-- dim_date table
CREATE TABLE dim_date (
    date_id INT AUTO_INCREMENT PRIMARY KEY,
    full_date DATE UNIQUE,
    day INT,
    month INT,
    quarter INT,
    year INT,
    day_of_week VARCHAR(10),
    is_weekend BOOLEAN
);

-- dim_product table
CREATE TABLE dim_product (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    current_price DECIMAL(10,2)
);

-- dim_store table
CREATE TABLE dim_store (
    store_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    region VARCHAR(50)
);

-- fact_sales table
CREATE TABLE fact_sales (
    sale_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    store_id INT,
    date_id INT,
    quantity_sold INT,
    revenue DECIMAL(10,2),
    FOREIGN KEY (product_id) REFERENCES dim_product(product_id),
    FOREIGN KEY (store_id) REFERENCES dim_store(store_id),
    FOREIGN KEY (date_id) REFERENCES dim_date(date_id)
);




Populate Date Dimension





-- Populate dim_date for May 2025
INSERT INTO dim_date (full_date, day, month, quarter, year, day_of_week, is_weekend) VALUES
('2025-05-01', 1, 5, 2, 2025, 'Thursday', FALSE),
('2025-05-02', 2, 5, 2, 2025, 'Friday', FALSE),
('2025-05-03', 3, 5, 2, 2025, 'Saturday', TRUE),
('2025-05-04', 4, 5, 2, 2025, 'Sunday', TRUE);





ETL Process





-- Populate dim_product
INSERT INTO dim_product (product_id, name, category, current_price)
SELECT product_id, name, category, price FROM retail_oltp.products;

-- Populate dim_store
INSERT INTO dim_store (store_id, name, region)
SELECT store_id, name, region FROM retail_oltp.stores;

-- Populate fact_sales
INSERT INTO fact_sales (product_id, store_id, date_id, quantity_sold, revenue)
SELECT 
    t.product_id,
    t.store_id,
    d.date_id,
    t.quantity,
    t.quantity * p.price AS revenue
FROM 
    retail_oltp.transactions t
JOIN 
    retail_oltp.products p ON t.product_id = p.product_id
JOIN 
    dim_date d ON t.transaction_date = d.full_date;





Analytical Queries




-- Monthly Sales Trends
SELECT d.month, SUM(fs.revenue) AS total_revenue
FROM fact_sales fs
JOIN dim_date d ON fs.date_id = d.date_id
GROUP BY d.month
ORDER BY d.month;

-- Top Selling Products
SELECT dp.name, SUM(fs.quantity_sold) AS total_units
FROM fact_sales fs
JOIN dim_product dp ON fs.product_id = dp.product_id
GROUP BY dp.name
ORDER BY total_units DESC
LIMIT 5;

